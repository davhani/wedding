"use client";

import { useEffect, useState } from "react";
import { motion } from "framer-motion";
import Confetti from "react-confetti";
import { useWindowSize } from "@react-hook/window-size";
import { supabase } from "@/lib/supabaseClient";

export default function InvitePage({ params }) {
	const [step, setStep] = useState(1);
	const [guests, setGuests] = useState([]);
	const [selectedGuests, setSelectedGuests] = useState([]);
	const [message, setMessage] = useState("");
	const [isSubmitted, setIsSubmitted] = useState(false);
	const [width, height] = useWindowSize();

	const code =
		typeof params?.code === "string" ? params.code : params?.code?.[0];

	useEffect(() => {
		const fetchGuests = async () => {
			if (!code) return;

			const { data, error } = await supabase
				.from("rsvps")
				.select("guest_name, is_attending, message")
				.eq("family_code", code);

			if (error) {
				console.error("Error fetching guests:", error);
				return;
			}

			setGuests(data);
			setSelectedGuests(
				data.filter((g) => g.is_attending).map((g) => g.guest_name)
			);

			// combine all existing messages (if needed)
			const existingMessages = data.map((g) => g.message).filter(Boolean);
			if (existingMessages.length > 0) {
				setMessage(existingMessages[0]);
			}
		};

		fetchGuests();
	}, [code]);

	const toggleGuest = (guest) => {
		setSelectedGuests((prev) =>
			prev.includes(guest) ? prev.filter((g) => g !== guest) : [...prev, guest]
		);
	};

	const nextStep = () => setStep((prev) => prev + 1);
	const prevStep = () => setStep((prev) => prev - 1);

	const handleSubmit = async () => {
		if (!code || guests.length === 0) return;

		const updates = guests.map((guest) => ({
			family_code: code,
			guest_name: guest.guest_name,
			is_attending: selectedGuests.includes(guest.guest_name),
			message: message.trim() || null,
		}));

		const { error } = await supabase
			.from("rsvps")
			.upsert(updates, { onConflict: ["family_code", "guest_name"] });

		if (error) {
			console.error("Supabase error:", error.message);
			return;
		}

		setIsSubmitted(true);
	};

	const stepperText =
		step === 1 ? "Who's Attending? âœ¨" : "Send Your Wishes ðŸ’–";

	if (isSubmitted) {
		return (
			<motion.div
				initial={{ opacity: 0, y: 30 }}
				animate={{ opacity: 1, y: 0 }}
				transition={{ duration: 0.8 }}
				className="min-h-screen flex flex-col items-center justify-center bg-cream py-10 px-4"
			>
				<Confetti
					width={width}
					height={height}
					numberOfPieces={300}
					gravity={0.2}
					recycle={false}
				/>
				<img
					src="/images/hero-david-martina.jpg"
					alt="Wedding Background"
					className="absolute inset-0 w-full h-full object-cover opacity-20 blur-sm"
				/>
				<div className="relative z-10 bg-white p-8 rounded-2xl shadow-lg w-full max-w-md text-center">
					<h2 className="text-3xl font-title text-rosegold mb-6">
						Thank you for RSVPing! ðŸŽ‰
					</h2>
					<p className="text-lg font-body text-gray-700 mb-8">
						We can't wait to celebrate together with you!
					</p>
					<a
						href="/"
						className="bg-[#B76E79] hover:bg-[#d1848e] text-white font-body py-3 px-8 rounded-full text-lg transition-colors duration-300 shadow-md"
					>
						Back to Home
					</a>
				</div>
			</motion.div>
		);
	}

	return (
		<div className="min-h-screen flex flex-col items-center justify-center bg-cream py-10 px-4">
			<img
				src="/images/hero-david-martina.jpg"
				alt="Wedding Background"
				className="absolute inset-0 w-full h-full object-cover opacity-20 blur-sm"
			/>

			<div className="flex flex-col items-center mb-6">
				<h3 className="font-title text-rosegold text-xl mb-4">{stepperText}</h3>
				<div className="flex flex-row items-center gap-4">
					<div
						className={`w-4 h-4 rounded-full ${
							step === 1 ? "bg-rosegold" : "bg-gray-300"
						} shadow-md`}
					></div>
					<div className="h-1 w-12 bg-gray-300 rounded-full"></div>
					<div
						className={`w-4 h-4 rounded-full ${
							step === 2 ? "bg-rosegold" : "bg-gray-300"
						} shadow-md`}
					></div>
				</div>
			</div>

			<div className="relative z-10 bg-white p-8 rounded-2xl shadow-lg w-full max-w-md">
				{step === 1 && (
					<>
						<h2 className="text-2xl font-title text-rosegold mb-6 text-center">
							Whoâ€™s joining the party? ðŸŽ‰
						</h2>
						<div className="flex flex-col gap-4">
							{guests.map((guest) => (
								<label
									key={guest.guest_name}
									className="flex items-center gap-3"
								>
									<input
										type="checkbox"
										checked={selectedGuests.includes(guest.guest_name)}
										onChange={() => toggleGuest(guest.guest_name)}
										className="w-5 h-5 text-rosegold focus:ring-rosegold rounded-md"
									/>
									<span className="font-body text-gray-700">
										{guest.guest_name}
									</span>
								</label>
							))}
						</div>
						<div className="mt-10 flex justify-center">
							<button
								onClick={nextStep}
								className="bg-[#B76E79] hover:bg-[#d1848e] text-white font-body py-3 px-8 rounded-full text-lg transition-colors duration-300 shadow-md"
							>
								Next
							</button>
						</div>
					</>
				)}

				{step === 2 && (
					<>
						<h2 className="text-2xl font-title text-rosegold mb-6 text-center">
							Leave a Message ðŸ’¬
						</h2>
						<textarea
							className="w-full h-32 p-4 border border-gray-300 rounded-md font-body text-gray-700 focus:ring-rosegold focus:border-rosegold transition-all duration-300"
							placeholder="Write your congratulations or a personal note here!"
							value={message}
							onChange={(e) => setMessage(e.target.value)}
						/>
						<div className="mt-10 flex justify-between">
							<button
								onClick={prevStep}
								className="bg-gray-300 hover:bg-gray-400 text-gray-800 font-body py-3 px-8 rounded-full text-lg transition-colors duration-300 shadow-md"
							>
								Back
							</button>
							<button
								onClick={handleSubmit}
								className="bg-[#B76E79] hover:bg-[#d1848e] text-white font-body py-3 px-8 rounded-full text-lg transition-colors duration-300 shadow-md"
							>
								Submit
							</button>
						</div>
					</>
				)}
			</div>
		</div>
	);
}
